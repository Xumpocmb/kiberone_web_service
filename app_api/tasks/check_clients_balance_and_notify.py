from email import message
import requests
from celery import shared_task
from django.conf import settings

from app_kiberclub.models import Client, AppUser, Location
from django.utils import timezone
import logging
import datetime
from datetime import date, timedelta
from app_api.alfa_crm_service.crm_service import get_client_lessons, get_taught_trial_lesson


logger = logging.getLogger(__name__)

def send_telegram_message(chat_id, text):
    token = getattr(settings, "TELEGRAM_BOT_TOKEN", None)
    if not token:
        raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, json=payload)
        if not response.ok:
            raise Exception(f"–û—à–∏–±–∫–∞ Telegram API: {response.text}")
    except Exception as e:
        logger.error(e)

    logger.info(f"[Telegram] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {chat_id}: {text}")
    pass


def send_telegram_message_with_inline_keyboard(chat_id, text, inline_keyboard):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    """
    token = getattr(settings, "TELEGRAM_BOT_TOKEN", None)
    if not token:
        raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {
        "chat_id": chat_id, 
        "text": text, 
        "parse_mode": "HTML",
        "reply_markup": {
            "inline_keyboard": inline_keyboard
        }
    }
    try:
        response = requests.post(url, json=payload)
        if not response.ok:
            raise Exception(f"–û—à–∏–±–∫–∞ Telegram API: {response.text}")
    except Exception as e:
        logger.error(e)

    logger.info(f"[Telegram] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–æ–π –¥–ª—è {chat_id}: {text}")


def send_telegram_document(chat_id, file_path, caption=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ Telegram
    """
    token = getattr(settings, "TELEGRAM_BOT_TOKEN", None)
    if not token:
        raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    url = f"https://api.telegram.org/bot{token}/sendDocument"
    
    try:
        with open(file_path, 'rb') as file:
            files = {'document': file}
            data = {'chat_id': chat_id}
            if caption:
                data['caption'] = caption
                
            response = requests.post(url, files=files, data=data)
            if not response.ok:
                raise Exception(f"–û—à–∏–±–∫–∞ Telegram API: {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        raise e

    logger.info(f"[Telegram] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª {file_path} –¥–ª—è {chat_id}")

@shared_task
def send_birthday_congratulations():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è
    """
    today = date.today()
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π...")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
    clients = Client.objects.select_related("user").filter(
        dob__day=today.day,
        dob__month=today.month
    )
    
    for client in clients:
        user: AppUser = client.user
        if not user or not user.telegram_id:
            continue

        message = (
            f"üéÇ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è, {client.name}! üéâ\n\n"
            f"–ö–æ–º–∞–Ω–¥–∞ KIBERone –∂–µ–ª–∞–µ—Ç —Ç–µ–±–µ —É—Å–ø–µ—Ö–æ–≤ –≤ —É—á–µ–±–µ, –Ω–æ–≤—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!\n\n"
            f"–ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —Ä–∞–¥–æ—Å—Ç—å—é –∏ —Å—á–∞—Å—Ç—å–µ–º!\n\n"
            f"–¢–≤–æ–π KIBERone! ‚ù§Ô∏è"
        )

        try:
            send_telegram_message(user.telegram_id, message)
            logger.info(f"–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")


@shared_task
def check_clients_balance_and_notify():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–º, —É –∫–æ–≥–æ paid_lesson_count < 1
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
    - –¥–æ 10-–≥–æ —á–∏—Å–ª–∞: –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    - –ø–æ—Å–ª–µ 10-–≥–æ —á–∏—Å–ª–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
    """
    now = timezone.now()
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")

    clients = Client.objects.select_related("user").filter(paid_lesson_count__lt=1)

    for client in clients:
        user: AppUser = client.user
        if not user or not user.telegram_id:
            continue
        
        lesson_response = get_client_lessons(user_crm_id=client.crm_id, branch_id=client.branch_id, lesson_status=1, lesson_type=2)
        planned_lessons_count = lesson_response.get("total", 0)
        if planned_lessons_count > 0:
            if lesson_response.get('total', 0) > lesson_response.get('count', 0):
                page = lesson_response.get('total', 0) // lesson_response.get('count', 1)
            else:
                page = 0
            logger.info(f"page: {page}")
            lesson_response = get_client_lessons(user_crm_id=client.crm_id, branch_id=client.branch_id, lesson_status=1, lesson_type=2, page=page)
            last_user_lesson = lesson_response.get("items", [])[-1]
            next_lesson_date = last_user_lesson.get("lesson_date") if last_user_lesson.get("lesson_date") else last_user_lesson.get("date")
        
            # –µ—Å–ª–∏ —É—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if timezone.now().strftime("%Y-%m-%d") == next_lesson_date:
                message = (
                    f"üîî –≠—Ç–æ PUSH —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å KIBER–∫–∞–∑–Ω—É\n\n"
                    "–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ KIBERone, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –±–æ–∫–æ–≤—É—é –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é->–ö–ò–ë–ï–†–º–µ–Ω—é->–û–ø–ª–∞—Ç–∏—Ç—å\n\n"
                    "–í–∞—à KIBERone!\n"
                )
                
                reminder_message = (
                    "–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç!\n"
                    "–£ –Ω–∞—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞—Å—å –≤–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–Ω—è—Ç–∏—è.\n"
                    "–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ KIBERone, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –±–æ–∫–æ–≤—É—é –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é->–ö–ò–ë–ï–†–º–µ–Ω—é->–û–ø–ª–∞—Ç–∏—Ç—å\n\n"
                    "–í–∞—à KIBERone!\n")

                # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
                current_day = now.day
                notification_text = message if current_day <= 10 else reminder_message

                try:
                    send_telegram_message(user.telegram_id, notification_text)
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                    continue


@shared_task
def check_clients_lessons_before():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–º, —É –∫–æ–≥–æ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –∑–∞–≤—Ç—Ä–∞
    """
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –º–µ–Ω—å—à–µ 1
    clients = Client.objects.select_related("user").filter(paid_lesson_count__lt=1)

    for client in clients:
        
        # –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
        lesson_response = get_client_lessons(user_crm_id=client.crm_id, branch_id=client.branch_id, lesson_status=1, lesson_type=3)
        
        total_trial_lessons = lesson_response.get("total", 0)
        
        if total_trial_lessons > 0:
            trial_lesson = lesson_response.get("items", [])[0]
            lesson_date = trial_lesson.get("date", None)
            lesson_time = f"{trial_lesson.get('time_from').split(' ')[1][:-3]}"
            room_id = trial_lesson.get("room_id", None)
            
            
            # –ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–∏
            location = Location.objects.filter(location_crm_id=room_id).first()
            
            if location:
                message = (
                    f"üîî –í–∞—à–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ –ö–ò–ë–ï–†-—à–∫–æ–ª–µ —É–∂–µ –∑–∞–≤—Ç—Ä–∞!\n"
                    f"–î–∞—Ç–∞: {lesson_date.split('-')[2]}.{lesson_date.split('-')[1]}\n"
                    f"–í—Ä–µ–º—è: {lesson_time}\n"
                    f"–ê–¥—Ä–µ—Å: {location.name}\n{location.map_url}\n\n"
                    "–í–∞—à KIBERone ‚ô•"
                )
                try:
                    send_telegram_message(client.user.telegram_id, message)
                except Exception as e:
                    continue
        
        # –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ü–ï–†–í–û–ú –ó–ê–ù–Ø–¢–ò–ò
        
        # –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
        lesson_response = get_client_lessons(user_crm_id=client.crm_id, branch_id=client.branch_id, lesson_status=1, lesson_type=2)
        
        planned_lessons_count = lesson_response.get("total", 0)
        
        if planned_lessons_count > 0:
            # –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
            user_taught_lessons = get_client_lessons(user_crm_id=client.crm_id, branch_id=client.branch_id, lesson_status=3, lesson_type=2)
            # –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
            taught_lessons_count = user_taught_lessons.get("total", 0)
            
            if taught_lessons_count == 0:
                # –∑–∞–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–∫
                if lesson_response.get('total', 0) > lesson_response.get('count', 0):
                    page = lesson_response.get('total', 0) // lesson_response.get('count', 1)
                else:
                    page = 0
                lesson_response = get_client_lessons(user_crm_id=client.crm_id, branch_id=client.branch_id, lesson_status=1, lesson_type=2, page=page)
                last_user_lesson = lesson_response.get("items", [])[-1]
                
                next_lesson_date = last_user_lesson.get("lesson_date") if last_user_lesson.get("lesson_date") else last_user_lesson.get("date")
                
                room_id = last_user_lesson.get("room_id", None)
                location = Location.objects.filter(location_crm_id=room_id).first()
                
                
                # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —É—Ä–æ–∫ –∑–∞–≤—Ç—Ä–∞
                tomorrow_date = (timezone.now() + timezone.timedelta(days=1)).strftime("%Y-%m-%d")
                
                if next_lesson_date == tomorrow_date:
                    message = (
                        f"üîî –í–∞—à–µ –ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ –ö–ò–ë–ï–†-—à–∫–æ–ª–µ —É–∂–µ –∑–∞–≤—Ç—Ä–∞!\n"
                        f"–î–∞—Ç–∞: {next_lesson_date.split('-')[2]}.{next_lesson_date.split('-')[1]}\n"
                        f"–í—Ä–µ–º—è: {last_user_lesson.get('time_from').split(' ')[1][:-3]}\n"
                        f"–ê–¥—Ä–µ—Å: {location.name}\n{location.map_url}\n\n"
                        "–í–∞—à KIBERone ‚ô•"
                    )
                    
                    try:
                        send_telegram_message(client.user.telegram_id, message)
                    except Exception as e:
                        continue


@shared_task
def check_client_passed_trial_lessons():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è—Ö.
    """
    logger.info("–°—Ç–∞—Ä—Ç –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —Ñ–∏–ª–∏–∞–ª–∞–º–∏
    users_qs = AppUser.objects.prefetch_related(
        "clients",
        "clients__branch"
    ).filter(clients__isnull=False).distinct()
    
    notification_count = 0

    for user in users_qs:
        user_clients = user.clients.all()

        for client in user_clients:
            client_crm_id = client.crm_id
            branch_id = None

            try:
                branch_id = int(client.branch.branch_id) if client.branch and client.branch.branch_id else None
            except Exception:
                branch_id = None

            if not client_crm_id or not branch_id:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ crm_id/branch_id: user={user.id} client={client.id}")
                continue

            try:
                lessons_response = get_taught_trial_lesson(customer_id=client_crm_id, branch_id=branch_id)
                items = []

                if lessons_response is not None:
                    try:
                        items = lessons_response.get("items", []) or []
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ CRM –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_crm_id}: {e}")

                attended = check_attend_on_lesson(items) if items else False

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ —É—Ä–æ–∫–∞
                if attended:
                    if user.telegram_id:
                        message = (
                            "–í—á–µ—Ä–∞ –≤—ã –±—ã–ª–∏ –Ω–∞ –ø—Ä–æ–±–Ω–æ–º –∑–∞–Ω—è—Ç–∏–∏ –≤ KIBERone üöÄ\n"
                            "–ê —Å–µ–≥–æ–¥–Ω—è –ª–æ–≤–∏—Ç–µ –ª–æ–≤–∏—Ç–µ –≥–∞–π–¥ –ø–æ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ ROBLOX ‚Äî –æ–∂–∏–≤–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–µ–±—è –≤ —Ä–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ üî•\n\n"
                            "–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö –≤ KIBERone! üöÄ"
                        )
                        
                        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"
                        inline_keyboard = [[{
                            "text": "üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫",
                            "callback_data": "get_gift"
                        }]]
                        
                        try:
                            send_telegram_message_with_inline_keyboard(user.telegram_id, message, inline_keyboard)
                            notification_count += 1
                            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–Ω–æ–º –∑–∞–Ω—è—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} (client_id={client.id})")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–Ω–æ–º –∑–∞–Ω—è—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                    else:
                        logger.info(f"–ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user.id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id")

                logger.info(f"user={user.id} client_crm_id={client_crm_id} attended_yesterday_trial={attended}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_crm_id} (user={user.id}): {e}")

    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notification_count}")


def check_attend_on_lesson(lessons):
    for lesson in lessons:
        details = lesson.get("details") or []
        if not details:
            continue
        lesson_details = details[0]
        is_attend = lesson_details.get("is_attend", False)
        date_str = lesson.get("date")
        if not date_str:
            continue
        if date_str == str(datetime.datetime.now().date() - timedelta(1)) and is_attend:
            return True

    return False
